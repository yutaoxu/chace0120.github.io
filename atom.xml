<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chace&#39;s Blog</title>
  <subtitle>Go AHead!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chace0120.github.io/"/>
  <updated>2016-07-16T14:07:08.922Z</updated>
  <id>http://chace0120.github.io/</id>
  
  <author>
    <name>chace</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot多数据源及MyBatis配置详解</title>
    <link href="http://chace0120.github.io/2016/07/15/SpringBoot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8F%8AMyBatis%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://chace0120.github.io/2016/07/15/SpringBoot多数据源及MyBatis配置详解/</id>
    <published>2016-07-15T08:38:40.000Z</published>
    <updated>2016-07-16T14:07:08.922Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近迫于项目需要，笔者踏上了springboot多数据源的配置之旅。之前笔者配置过spring的动态多数据源切换，当时使用的是JDBC Template。&lt;/p&gt;
&lt;p&gt;目前项目中持久化框架使用是mybatis，经过分析后不难发现，多数据源配置需要解决两个问题，一个是由原先的spring经典方式切换到了springboot方式下，多数据源如何配置？有无太大变化？另一个是怎样将多数据源与mybatis的配置关联起来？&lt;/p&gt;
&lt;p&gt;不妨先来看下,单数据源下mybatis如何配置的？&lt;/p&gt;
&lt;h3 id=&quot;单数据源示例&quot;&gt;&lt;a href=&quot;#单数据源示例&quot; class=&quot;headerlink&quot; title=&quot;单数据源示例&quot;&gt;&lt;/a&gt;单数据源示例&lt;/h3&gt;&lt;p&gt;首先要声明一点，项目只是依赖单个数据源时，如果你不介意springboot帮你做事的话，那么恭喜你，你省事儿了！你只需要在项目的属性文件中添加数据源的相关属性配置，springboot会“免费”提供给你一个数据源使用，默认采用的是&lt;a href=&quot;https://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tomcat jdbc connection pool&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当然你可以拒绝springboot的好意，如果你依赖第三方的连接池技术，你可以配置自己的数据源，那么springboot检测到你自己定义了DataSource后，就不会自动配置数据源了。&lt;/p&gt;
&lt;p&gt;笔者不能拒绝springboot的好意，所以仅在项目的application.properties中添加了如下属性：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.url=jdbc:mysql:&lt;span class=&quot;comment&quot;&gt;//localhost:3306/test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.username=root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.password=root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.driver-&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;/span&gt;=com.mysql.jdbc.Driver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.max-idle=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.max-wait=&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.min-idle=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.initial-size=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.validation-query=SELECT &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.test-on-borrow=&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.test-&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;-idle=&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.time-between-eviction-runs-millis=&lt;span class=&quot;number&quot;&gt;18800&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后笔者创建了一个专门用于配置mybatis的类，如下:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MybatisSpringConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;sqlSessionFactory&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; SqlSessionFactory &lt;span class=&quot;title&quot;&gt;sqlSessionFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DataSource dataSource)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SqlSessionFactoryBean factoryBean = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SqlSessionFactoryBean();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factoryBean.setDataSource(dataSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factoryBean.setTypeAliasesPackage(&lt;span class=&quot;string&quot;&gt;&quot;demo.model&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; factoryBean.getObject();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; MapperScannerConfigurer &lt;span class=&quot;title&quot;&gt;mapperScannerConfigurer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MapperScannerConfigurer mapperScannerConfigurer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MapperScannerConfigurer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mapperScannerConfigurer.setBasePackage(&lt;span class=&quot;string&quot;&gt;&quot;demo.repository&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mapperScannerConfigurer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;没错，mybatis在spring中就是可以通过如此的简练配置进而正常工作起来。你无需刻意地去创建mybatis的配置文件，无需刻意地去注册mapper接口及指定对应xml文件的位置，这完全得益于&lt;a href=&quot;http://www.mybatis.org/spring/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mybatis-spring&lt;/a&gt;，它就像一个“粘合剂”，可以很方便地将mybatis和spring“粘合”在一起。&lt;/p&gt;
&lt;h4 id=&quot;MyBatis-Spring的配置步骤&quot;&gt;&lt;a href=&quot;#MyBatis-Spring的配置步骤&quot; class=&quot;headerlink&quot; title=&quot;MyBatis-Spring的配置步骤&quot;&gt;&lt;/a&gt;MyBatis-Spring的配置步骤&lt;/h4&gt;&lt;p&gt;不妨先来说下mybatis-spring配置的一般步骤：&lt;/p&gt;
&lt;p&gt;1 配置数据源DataSource的Bean。&lt;br&gt;2 使用DataSource配置事务管理器。&lt;br&gt;3 使用DataSource配置SqlSessionFactory的Bean。&lt;br&gt;4 配置MapperScannerConfigurer的Bean。&lt;/p&gt;
&lt;p&gt;这里要求配置事务管理器和SqlSessionFactory的数据源必须是同一个，否则事务管理不起作用。配置MapperScannerConfigurer的目的是自动扫描mapper接口所在的包，自动帮你将mapper接口注册为Bean（代理生成接口的实现类），你就可以直接拿来依赖注入了，建议将mapper接口及其对应的xml文件放在同一个包下，这样的话你无需在SqlSessionFactory里指定xml文件的位置了。&lt;/p&gt;
&lt;p&gt;OK，到此对比我上面贴出的配置类内容，你可能会发现笔者怎么少了几步？感谢springboot，因为它自动配置了一个DataSource，同时它还自动配置了一个事务管理器。所以笔者只配置了SqlSessionFactory和MapperScannerConfigurer。&lt;/p&gt;
&lt;p&gt;当然如果看到这里你仍然“执意”要配置自己的数据源，参照下面的多数据源配置说明，抽出来多个中的一个就可以实现自定义单数据源的配置了。&lt;/p&gt;
&lt;h3 id=&quot;多数据源示例&quot;&gt;&lt;a href=&quot;#多数据源示例&quot; class=&quot;headerlink&quot; title=&quot;多数据源示例&quot;&gt;&lt;/a&gt;多数据源示例&lt;/h3&gt;&lt;p&gt;经过上面单数据源的示例，可以说当我们切换到springboot的方式下写代码时，springboot为我们带来了很大的便利，还不影响我们自定义，所以笔者认为，没用使用springboot之前，无论你使用spring怎样的配置，使用springboot之后，不会有阻碍，甚至会比原来更快！&lt;/p&gt;
&lt;p&gt;简单说下需要多数据源的场景，笔者参照了一下其他的文章，绝大部分的需要来自于数据库主从方式或读写分离。那么就按照master和slave两个数据源，直接贴出数据源的配置类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;application.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;datasource.master.url=jdbc:mysql:&lt;span class=&quot;comment&quot;&gt;//localhost:3306/master&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.master.username=root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.master.password=root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.master.driver-&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;/span&gt;=com.mysql.jdbc.Driver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.master.max-idle=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.master.max-wait=&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.master.min-idle=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.master.initial-size=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.master.validation-query=SELECT &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.master.test-on-borrow=&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.master.test-&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;-idle=&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.master.time-between-eviction-runs-millis=&lt;span class=&quot;number&quot;&gt;18800&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.slave.url=jdbc:mysql:&lt;span class=&quot;comment&quot;&gt;//localhost:3306/slave&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.slave.username=root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.slave.password=root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.slave.driver-&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;/span&gt;=com.mysql.jdbc.Driver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.slave.max-idle=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.slave.max-wait=&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.slave.min-idle=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.slave.initial-size=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.slave.validation-query=SELECT &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.slave.test-on-borrow=&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.slave.test-&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;-idle=&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datasource.slave.time-between-eviction-runs-millis=&lt;span class=&quot;number&quot;&gt;18800&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;master数据源&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MasterConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Primary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;masterDataSource&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span class=&quot;string&quot;&gt;&quot;datasource.master&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSource &lt;span class=&quot;title&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DataSourceBuilder.create().build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Primary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;masterTransactionManager&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSourceTransactionManager &lt;span class=&quot;title&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Qualifier(&lt;span class=&quot;string&quot;&gt;&quot;masterDataSource&quot;&lt;/span&gt;)&lt;/span&gt; DataSource dataSource) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DataSourceTransactionManager(dataSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;slave数据源&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SlaveConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;slaveDataSource&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span class=&quot;string&quot;&gt;&quot;datasource.slave&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSource &lt;span class=&quot;title&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DataSourceBuilder.create().build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;slaveTransactionManager&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSourceTransactionManager &lt;span class=&quot;title&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Qualifier(&lt;span class=&quot;string&quot;&gt;&quot;slaveDataSource&quot;&lt;/span&gt;)&lt;/span&gt; DataSource dataSource) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DataSourceTransactionManager(dataSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不难看出两个数据源的配置步骤吧：&lt;/p&gt;
&lt;p&gt;1 在属性文件中配置两个数据源需要用到的属性值，注意起个好点的前缀名称。&lt;br&gt;2 构建两个数据源的配置类，当然这不是必须的，愿意堆在一个配置类中未尝不可。&lt;br&gt;3 配置类中，配置DataSource的Bean，记得起个能够标识的name！&lt;br&gt;4 配置两个数据源各自对应的事务管理器，别嫌麻烦，否则会给自己埋坑里，记得起个能够标识的name！&lt;/p&gt;
&lt;p&gt;配置DataSource时，利用@ConfigurationProperties(prefix = “xxx.xxx”)可以依靠指定的前缀，在诸多的属性值中“挑选”出数据源依赖的属性，进而完成数据源的构建。&lt;/p&gt;
&lt;p&gt;当自己定义了DataSource后，springboot就会取消自动配置的动作了。为了各司其职，为每个数据源配置各自的事务管理器，springboot自然也会取消自动配置事务管理器的动作。由于是多个数据源和多个事务管理器，都是一个类型的，你要是不起个区别的名字，任谁都分辨不出来吧？&lt;/p&gt;
&lt;p&gt;&lt;em&gt;@Primary&lt;/em&gt; 有什么作用呢？简单地说，当有两个同一类型的Bean，依赖注入时你没有指定name，正常情况下会报错，有两个你要的Bean，识别不了。但是 &lt;em&gt;@Primary&lt;/em&gt; 相当于指定这个Bean为默认的，如果你没有指定name，就采用 &lt;em&gt;@Primary&lt;/em&gt; 标识的Bean。&lt;/p&gt;
&lt;p&gt;OK，两个数据源的配置配好了，还需要配置各自的Mybatis来进行持久化的操作。&lt;/p&gt;
&lt;h4 id=&quot;MyBatis-Spring相关配置&quot;&gt;&lt;a href=&quot;#MyBatis-Spring相关配置&quot; class=&quot;headerlink&quot; title=&quot;MyBatis-Spring相关配置&quot;&gt;&lt;/a&gt;MyBatis-Spring相关配置&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;mybatis for master&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@MapperScan&lt;/span&gt;(basePackages = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;demo.repository.master&quot;&lt;/span&gt;&amp;#125;, sqlSessionFactoryRef = &lt;span class=&quot;string&quot;&gt;&quot;masterSqlSessionFactory&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MasterConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Primary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;masterDataSource&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span class=&quot;string&quot;&gt;&quot;datasource.master&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSource &lt;span class=&quot;title&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DataSourceBuilder.create().build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Primary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;masterTransactionManager&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSourceTransactionManager &lt;span class=&quot;title&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Qualifier(&lt;span class=&quot;string&quot;&gt;&quot;masterDataSource&quot;&lt;/span&gt;)&lt;/span&gt; DataSource dataSource) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DataSourceTransactionManager(dataSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Primary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;masterSqlSessionFactory&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; SqlSessionFactory &lt;span class=&quot;title&quot;&gt;sqlSessionFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Qualifier(&lt;span class=&quot;string&quot;&gt;&quot;masterDataSource&quot;&lt;/span&gt;)&lt;/span&gt; DataSource dataSource) &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SqlSessionFactoryBean factoryBean = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SqlSessionFactoryBean();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factoryBean.setDataSource(dataSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factoryBean.setTypeAliasesPackage(&lt;span class=&quot;string&quot;&gt;&quot;demo.model&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; factoryBean.getObject();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;mybatis for slave&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@MapperScan&lt;/span&gt;(basePackages = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;demo.repository.slave&quot;&lt;/span&gt;&amp;#125;, sqlSessionFactoryRef = &lt;span class=&quot;string&quot;&gt;&quot;slaveSqlSessionFactory&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SlaveConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;slaveDataSource&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span class=&quot;string&quot;&gt;&quot;datasource.slave&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSource &lt;span class=&quot;title&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DataSourceBuilder.create().build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;slaveTransactionManager&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSourceTransactionManager &lt;span class=&quot;title&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Qualifier(&lt;span class=&quot;string&quot;&gt;&quot;slaveDataSource&quot;&lt;/span&gt;)&lt;/span&gt; DataSource dataSource) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DataSourceTransactionManager(dataSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;slaveSqlSessionFactory&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; SqlSessionFactory &lt;span class=&quot;title&quot;&gt;basicSqlSessionFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Qualifier(&lt;span class=&quot;string&quot;&gt;&quot;slaveDataSource&quot;&lt;/span&gt;)&lt;/span&gt; DataSource basicDataSource) &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SqlSessionFactoryBean factoryBean = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SqlSessionFactoryBean();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factoryBean.setDataSource(basicDataSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factoryBean.setTypeAliasesPackage(&lt;span class=&quot;string&quot;&gt;&quot;demo.model&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; factoryBean.getObject();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里需要强调几个地方：&lt;/p&gt;
&lt;p&gt;1 细心人会发现上面的配置类中，少了MapperScannerConfigurer的Bean配置，改用了@MapperScan注解。其实两者的作用是一样的，但是@MapperScan比较新，稍后会做解释为什么它比较新。&lt;br&gt;2 由于两个数据源的原因，引出了两套SqlSessionFactory的配置，所以@MapperScan中需要指明依赖的是哪个SqlSessionFactory，“sqlSessionFactoryRef”对应就是SqlSessionFactory的name属性。&lt;br&gt;3 @MapperScan会将扫描的mapper接口代理生成实现类，并自动注册为Bean。由于两个数据源的配置类中都有@MapperScan注解，为了避免造成冲突和排错时的困扰，猛烈提醒，两个数据源的配置，mybatis对应的mapper接口及对应xml文件也构建两套，最好接口名上也做些区分。model类使用同一套倒是没什么影响。所以你会看到上面的配置中，@MapperScan中basePackages指向的是两个包路径。&lt;/p&gt;
&lt;p&gt;好了，来解释下@MapperScan为何比较新，并且笔者推荐使用@MapperScan。&lt;/p&gt;
&lt;p&gt;首先@MapperScan要求的mybatis-spring版本比较新，说明它是新推出的特性。&lt;/p&gt;
&lt;p&gt;其次@MapperScan要比配置MapperScannerConfigurer的Bean要简练的多，代码量上就看得出来。&lt;/p&gt;
&lt;p&gt;最后，@MapperScan中的basePackageClasses属性是MapperScannerConfigurer所没有的。并且笔者用到了这个basePackageClasses属性，所以这里强力推荐使用@MapperScan注解。&lt;/p&gt;
&lt;p&gt;多聊一些，描述下笔者为何会用到@MapperScan中的basePackageClasses属性吧，况且与上述示例中的basePackages有何区别呢？&lt;/p&gt;
&lt;p&gt;上面提到了多数据源的一般场景，笔者的不同。笔者的项目中划分了n个子模块，每个子模块有各自的数据库，现在需要每个子模块共享一个公共信息的数据库。&lt;/p&gt;
&lt;p&gt;从代码上来说，由于各个子模块依赖的公共信息数据库-数据源、mapper接口和xml映射文件是相同的，笔者希望将这些类和文件抽离到maven的一个公共module（最后会打包为一个jar文件）中，供其他n个子模块依赖使用，这样可以避免重复代码嘛。&lt;/p&gt;
&lt;p&gt;笔者这么做之后，发现配置MapperScannerConfigurer的basePackages找不到mapper接口所在的包路径，因为笔者是在子模块中配置的MapperScannerConfigurer，它自然会在子模块的结构中去寻找指定的包路径，是mapper接口被笔者放到了公共的module中，所以是找不到的！&lt;/p&gt;
&lt;p&gt;不过还好在@MapperScan中发现了basePackageClasses属性，它会“接受”你指定的mapper接口的全名。再次提醒，记得把xml映射文件和mapper接口放在一起，mybatis-spring会帮你做关联。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;1 以上是笔者亲自操作过后的经验总结，阅读者需要对springboot、mybatis-spring有所了解，理解起来才不会吃力。&lt;br&gt;2 经历过多数据源的配置过程之后，笔者发现mybatis-spring官方文档的中文版比英文版是有缺失的，不够新！所以强烈建议查阅英文版文档，上述贴出的链接中就是英文版的地址。&lt;br&gt;3 关于springboot多数据源配置的文章很多，但大多数只是贴出了代码，没有说明为何，而且配置方法还各有不同。所以应用者不能只是应用，需要自己搞清楚原因，才是学习的过程。&lt;br&gt;4 笔者上面的描述内容很多，如有不明白之处，欢迎讨论指正。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近迫于项目需要，笔者踏上了springboot多数据源的配置之旅。之前笔者配置过spring的动态多数据源切换，当时使用的是JDBC Te
    
    </summary>
    
      <category term="开发笔记" scheme="http://chace0120.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring" scheme="http://chace0120.github.io/tags/spring/"/>
    
      <category term="springboot" scheme="http://chace0120.github.io/tags/springboot/"/>
    
      <category term="mybatis" scheme="http://chace0120.github.io/tags/mybatis/"/>
    
      <category term="datasource" scheme="http://chace0120.github.io/tags/datasource/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下快速安装Nginx</title>
    <link href="http://chace0120.github.io/2016/06/30/Ubuntu%E4%B8%8B%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85Nginx/"/>
    <id>http://chace0120.github.io/2016/06/30/Ubuntu下快速安装Nginx/</id>
    <published>2016-06-30T08:14:40.000Z</published>
    <updated>2016-07-16T13:23:41.204Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Linux操作系统有很多不同的发行版本，像Ubuntu、CentOS、RedHat等等，有些是收费的，有些是免费的。接触过Linux的人多少对这些信息有些了解。虽然版本不同，但大部分系统命令还是一致的，可能会有细微的差别。&lt;/p&gt;
&lt;p&gt;今天笔者就经历一把不同版本的Linux操作系统中安装nginx。笔者之前写过一篇CentOS下安装nginx的文章，这次由于客户那边换了个新的服务器，Ubuntu的，没办法，再来一遍~对比两次的安装经历，诞生了这篇文章。&lt;/p&gt;
&lt;h3 id=&quot;Nginx安装&quot;&gt;&lt;a href=&quot;#Nginx安装&quot; class=&quot;headerlink&quot; title=&quot;Nginx安装&quot;&gt;&lt;/a&gt;Nginx安装&lt;/h3&gt;&lt;p&gt;虽然发行版本不同，但说白了还都是Linux的系统，所以系统命令没有太大差别。安装nginx，我们可以选择纯手工方式和自动化方式。&lt;/p&gt;
&lt;p&gt;纯手工方式就是自己下载tar.gz包，然后编译安装。这种方式在CentOS和Ubuntu下是无差别的。&lt;/p&gt;
&lt;p&gt;自动化方式即利用系统中的软件库，通过快捷命令实现一键安装。CentOS常见的是yum，而Ubuntu中方便的的是apt。这里可以理解为windows操作系统中的360软件管家，里面有许多现成的软件供我们一键安装到位！&lt;/p&gt;
&lt;p&gt;笔者是个懒人~自然还是选择自动化的方式。&lt;/p&gt;
&lt;p&gt;原先在CentOS下靠的是yum，结果到Ubuntu下一看，没有！网上帖子和文章还是以apt居多，那自然选用apt走着。&lt;/p&gt;
&lt;p&gt;但笔者突然先发现使用apt安装nginx的命令中并没有指定版本号，所以笔者好奇自动安装的nginx版本是啥呢？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# sudo apt-cache policy &amp;lt;packagename&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将&lt;packagename&gt;换成nginx一看，版本是1.4.6。笔者觉着有点低，怎么样才能利用apt安装最新的版本呢？根据查看nginx官网的安装说明和其他文章作为验证，总结出以下的快速安装方法，而且是最新版本呦。&lt;/packagename&gt;&lt;/p&gt;
&lt;p&gt;1 从Nginx官网下载供apt程序认证使用的key，具体说明点&lt;a href=&quot;http://nginx.org/en/linux_packages.html#stable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# cd /tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# wget http://nginx.org/keys/nginx_signing.key&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2 将下载好的认证key添加到apt程序的key中。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# sudo apt-key add nginx_signing.key&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3 向/etc/apt/sourses.list文件中追加如下内容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;deb &lt;a href=&quot;http://nginx.org/packages/mainline/ubuntu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nginx.org/packages/mainline/ubuntu/&lt;/a&gt; {codename} nginx&lt;/p&gt;
&lt;p&gt;deb-src &lt;a href=&quot;http://nginx.org/packages/mainline/ubuntu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nginx.org/packages/mainline/ubuntu/&lt;/a&gt; {codename} nginx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上述内容中的codename需要替换成Nginx官方指定的值，这里需要先查看下Ubuntu的版本是啥？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# lsb_release -a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;笔者的Ubuntu版本是14.04，对照&lt;a href=&quot;http://nginx.org/en/linux_packages.html#distributions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;，codename应该换成trusty。所以最终内容应该是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;deb &lt;a href=&quot;http://nginx.org/packages/mainline/ubuntu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nginx.org/packages/mainline/ubuntu/&lt;/a&gt; trusty nginx&lt;/p&gt;
&lt;p&gt;deb-src &lt;a href=&quot;http://nginx.org/packages/mainline/ubuntu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nginx.org/packages/mainline/ubuntu/&lt;/a&gt; trusty nginx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记得保存退出文件哦~&lt;/p&gt;
&lt;p&gt;4 执行apt安装的命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# sudo apt-get install nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;搞定！当然如果不介意nginx的版本，可以直接进行第4步，安装过程更快了一步。&lt;/p&gt;
&lt;h3 id=&quot;测试运行&quot;&gt;&lt;a href=&quot;#测试运行&quot; class=&quot;headerlink&quot; title=&quot;测试运行&quot;&gt;&lt;/a&gt;测试运行&lt;/h3&gt;&lt;p&gt;依靠apt自动安装过nginx后，文件的结构大致如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的配置文件在/etc/nginx目录下。&lt;/li&gt;
&lt;li&gt;执行程序文件在/usr/sbin/nginx目录下。&lt;/li&gt;
&lt;li&gt;日志放在/var/log/nginx目录下。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自动化安装方式默认已经在/etc/init.d下创建了nginx的启动脚本，所以可以很方便地使用如下的命令来操纵nginx服务。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# service nginx &amp;#123;start|stop|status|restart|reload|configtest&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Linux操作系统有很多不同的发行版本，像Ubuntu、CentOS、RedHat等等，有些是收费的，有些是免费的。接触过Linux的人多少
    
    </summary>
    
      <category term="开发笔记" scheme="http://chace0120.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://chace0120.github.io/tags/linux/"/>
    
      <category term="nginx" scheme="http://chace0120.github.io/tags/nginx/"/>
    
      <category term="ubuntu" scheme="http://chace0120.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>CentOS部署应用常用命令汇总</title>
    <link href="http://chace0120.github.io/2016/06/08/CentOS%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <id>http://chace0120.github.io/2016/06/08/CentOS部署应用常用命令汇总/</id>
    <published>2016-06-08T09:05:40.000Z</published>
    <updated>2016-07-16T13:23:41.188Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近项目在不断地更新迭代，项目部署也由笔者来做了。由于笔者不是专业的Linux服务器运维人员，所以好多用到的命令都是现查现用。这里汇总一下笔者目前自己用的命令，方便今后查阅。&lt;/p&gt;
&lt;p&gt;当然随着部署工作的不断进行，笔者也会陆续更新学习到的内容。&lt;/p&gt;
&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;h4 id=&quot;删除目录或文件&quot;&gt;&lt;a href=&quot;#删除目录或文件&quot; class=&quot;headerlink&quot; title=&quot;删除目录或文件&quot;&gt;&lt;/a&gt;删除目录或文件&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rm -rf &amp;lt;目录或文件&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;选项f表示强制删除，注意使用。&lt;/p&gt;
&lt;h4 id=&quot;解压缩zip压缩包&quot;&gt;&lt;a href=&quot;#解压缩zip压缩包&quot; class=&quot;headerlink&quot; title=&quot;解压缩zip压缩包&quot;&gt;&lt;/a&gt;解压缩zip压缩包&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;unzip &amp;lt;zip文件位置&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认解压到zip所在位置。笔者上传部署项目至服务器上时，习惯打包为zip。&lt;/p&gt;
&lt;h4 id=&quot;重命名目录或文件名&quot;&gt;&lt;a href=&quot;#重命名目录或文件名&quot; class=&quot;headerlink&quot; title=&quot;重命名目录或文件名&quot;&gt;&lt;/a&gt;重命名目录或文件名&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd &amp;lt;目录或文件位置&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv &amp;lt;目录或文件&amp;gt; ./&amp;lt;新名称&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重命名使用的是mv命令，mv代表移动目录或文件。&lt;/p&gt;
&lt;h4 id=&quot;查看指定名称的程序进程&quot;&gt;&lt;a href=&quot;#查看指定名称的程序进程&quot; class=&quot;headerlink&quot; title=&quot;查看指定名称的程序进程&quot;&gt;&lt;/a&gt;查看指定名称的程序进程&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ps aux | grep &amp;lt;模糊名称&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;查看指定端口号的占用情况&quot;&gt;&lt;a href=&quot;#查看指定端口号的占用情况&quot; class=&quot;headerlink&quot; title=&quot;查看指定端口号的占用情况&quot;&gt;&lt;/a&gt;查看指定端口号的占用情况&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;netstat -tlnp | grep &amp;lt;端口号&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;可运行jar包的执行&quot;&gt;&lt;a href=&quot;#可运行jar包的执行&quot; class=&quot;headerlink&quot; title=&quot;可运行jar包的执行&quot;&gt;&lt;/a&gt;可运行jar包的执行&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nohup java -jar &amp;lt;jar包位置&amp;gt; &amp;gt;/dev/null &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;/dev/null表示运行jar时控制台输出重定向到null中，就是控制台不显示信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;amp;表示程序作为后台进程运行，这样即使关闭控制终端，程序依然在运行不会终止。&lt;/p&gt;
&lt;p&gt;运行jar时可能需要配置内存，运行如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nohup java -Xmx1024m -Xms1024m -jar &amp;lt;jar包位置&amp;gt; &amp;gt;/dev/null &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;查看程序内存占用的排行信息&quot;&gt;&lt;a href=&quot;#查看程序内存占用的排行信息&quot; class=&quot;headerlink&quot; title=&quot;查看程序内存占用的排行信息&quot;&gt;&lt;/a&gt;查看程序内存占用的排行信息&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ps -eo rss,pmem,pcpu,vsize,args |  sort -k 1 -r -n | less&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;rss: resident set size,表示进程占用RAM(内存)的大小，单位是KB&lt;/li&gt;
&lt;li&gt;pmem: %M, 占用内存的百分比&lt;/li&gt;
&lt;li&gt;pcpu: %C，占用cpu的百分比&lt;/li&gt;
&lt;li&gt;vsize: 表示进程占用的虚拟内存的大小，KB&lt;/li&gt;
&lt;li&gt;args: 进程名（command）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sort命令对ps结果进行排序&lt;/p&gt;
&lt;p&gt;-k 1: 按第一个参数 rss进行排序&lt;/p&gt;
&lt;p&gt;-r: 逆序&lt;/p&gt;
&lt;p&gt;-n: numeric，按数字来排序&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近项目在不断地更新迭代，项目部署也由笔者来做了。由于笔者不是专业的Linux服务器运维人员，所以好多用到的命令都是现查现用。这里汇总一下笔
    
    </summary>
    
      <category term="系统运维" scheme="http://chace0120.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="centos" scheme="http://chace0120.github.io/tags/centos/"/>
    
      <category term="linux" scheme="http://chace0120.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下安装Nginx</title>
    <link href="http://chace0120.github.io/2016/05/23/CentOS%E4%B8%8B%E5%AE%89%E8%A3%85Nginx/"/>
    <id>http://chace0120.github.io/2016/05/23/CentOS下安装Nginx/</id>
    <published>2016-05-23T01:29:40.000Z</published>
    <updated>2016-05-23T13:49:16.885Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;项目需要，自己整个nginx玩玩，部署服务器的操作系统为CentOS 6.5。&lt;/p&gt;
&lt;h3 id=&quot;nginx安装&quot;&gt;&lt;a href=&quot;#nginx安装&quot; class=&quot;headerlink&quot; title=&quot;nginx安装&quot;&gt;&lt;/a&gt;nginx安装&lt;/h3&gt;&lt;p&gt;上网搜了一下关于nginx的安装教程，大致存在两种安装方法，都是通过yum install命令来完成。&lt;/p&gt;
&lt;p&gt;方法一：自己选择下载安装nginx依赖的其他包，然后下载nginx的安装包，编译安装即可。这种方式的好处是扩展性强，往后需要安装其他模块都是可控的。不妥之处是步骤繁琐，依赖包多，需要牢记。&lt;/p&gt;
&lt;p&gt;可参照如下教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://seanlook.com/2015/05/17/nginx-install-and-config/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nginx服务器安装及配置文件详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.runoob.com/linux/nginx-install-setup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nginx 安装配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/d5114a2a2052&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CentOS nginx安装与配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法二：由于CentOS下，yum源不提供nginx的安装，所以可以通过添加yum源进行快速安装。这种方式的好处是快，方便。不妥之处是不可控，都是别人准备好的东西进行的“一键安装”，今后想安装第三方模块也无从下手。而且笔者目前对这种方式也不是特别理解，所以可能出了差错，也爱莫能助。&lt;/p&gt;
&lt;p&gt;可参照如下教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/ifels/c8cfdfe249e27ffa9ba1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CentOS 6.5 nginx安装与配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h4&gt;&lt;p&gt;如果你已经浏览过上述提供的安装方式后，这里可以对nginx的安装过程进行一些总结。&lt;/p&gt;
&lt;p&gt;其实概括地来讲，安装nginx的步骤为两步，先安装nginx依赖的库，然后安装nginx。安装方式无非两种，如果yum源中存在需要的库，可以方便地使用yum来安装；如果yum源中没有需要的库，那么只能自己下载对应的安装包，然后执行编译安装命令。当然你也可以完全不使用yum，自己下载所有需要的源码安装包，然后编译安装。&lt;/p&gt;
&lt;h3 id=&quot;nginx运行&quot;&gt;&lt;a href=&quot;#nginx运行&quot; class=&quot;headerlink&quot; title=&quot;nginx运行&quot;&gt;&lt;/a&gt;nginx运行&lt;/h3&gt;&lt;p&gt;假设nginx安装在/usr/local/nginx/sbin下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/nginx
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;启动nginx&quot;&gt;&lt;a href=&quot;#启动nginx&quot; class=&quot;headerlink&quot; title=&quot;启动nginx&quot;&gt;&lt;/a&gt;启动nginx&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# ./sbin/nginx        # 默认配置文件 conf/nginx.conf，-c 指定
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;停止nginx&quot;&gt;&lt;a href=&quot;#停止nginx&quot; class=&quot;headerlink&quot; title=&quot;停止nginx&quot;&gt;&lt;/a&gt;停止nginx&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# ./sbin/nginx -s stop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pkill nginx
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;重新加载配置文件&quot;&gt;&lt;a href=&quot;#重新加载配置文件&quot; class=&quot;headerlink&quot; title=&quot;重新加载配置文件&quot;&gt;&lt;/a&gt;重新加载配置文件&lt;/h4&gt;&lt;p&gt;reload用于配置文件改变后的nginx刷新应用，没必要一定得停止nginx。reload不会改变启动时指定的配置文件位置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./sbin/nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;系统服务&quot;&gt;&lt;a href=&quot;#系统服务&quot; class=&quot;headerlink&quot; title=&quot;系统服务&quot;&gt;&lt;/a&gt;系统服务&lt;/h4&gt;&lt;p&gt;当然如果将nginx设置为linux系统服务，那么就可以方便使用下面的命令进行上述的操纵：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# service nginx {start|stop|status|restart|reload|configtest}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;笔者使用方法二进行的安装，所以nginx会自动被安装为系统服务了。你也可以搜索如何设置nginx为linux服务。&lt;/p&gt;
&lt;h3 id=&quot;其他相关命令&quot;&gt;&lt;a href=&quot;#其他相关命令&quot; class=&quot;headerlink&quot; title=&quot;其他相关命令&quot;&gt;&lt;/a&gt;其他相关命令&lt;/h3&gt;&lt;h4 id=&quot;查看系统中指定端口号是否被占用&quot;&gt;&lt;a href=&quot;#查看系统中指定端口号是否被占用&quot; class=&quot;headerlink&quot; title=&quot;查看系统中指定端口号是否被占用&quot;&gt;&lt;/a&gt;查看系统中指定端口号是否被占用&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# netstat -apn|grep &amp;lt;端口号&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;项目需要，自己整个nginx玩玩，部署服务器的操作系统为CentOS 6.5。&lt;/p&gt;
&lt;h3 id=&quot;nginx安装&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="开发笔记" scheme="http://chace0120.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="centos" scheme="http://chace0120.github.io/tags/centos/"/>
    
      <category term="linux" scheme="http://chace0120.github.io/tags/linux/"/>
    
      <category term="nginx" scheme="http://chace0120.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux下Redis的安装过程</title>
    <link href="http://chace0120.github.io/2016/05/21/Linux%E4%B8%8BRedis%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/"/>
    <id>http://chace0120.github.io/2016/05/21/Linux下Redis的安装过程/</id>
    <published>2016-05-21T02:50:40.000Z</published>
    <updated>2016-07-16T13:23:41.204Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在linux操作系统下安装redis的教程，网上已经烂大街了，笔者觉着自己在配置过程中有些操作不太理解，所以在此重新梳理一下安装过程，并对一些要点着重进行说明。&lt;/p&gt;
&lt;p&gt;笔者的服务器为CentOS 6.5，redis下载的版本为当前最新的稳定版本。&lt;/p&gt;
&lt;h3 id=&quot;下载redis&quot;&gt;&lt;a href=&quot;#下载redis&quot; class=&quot;headerlink&quot; title=&quot;下载redis&quot;&gt;&lt;/a&gt;下载redis&lt;/h3&gt;&lt;p&gt;下载redis的方式主要有两种，一种是自己下载tar.gz包，然后上传到服务器上进行解压缩。另一种是通过wget命令直接下载redis的压缩包到服务器，然后解压缩。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget http://download.redis.io/releases/redis-3.0.5.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看到此处时，根据自己的需要去选择redis的版本。&lt;/p&gt;
&lt;h3 id=&quot;编译安装redis&quot;&gt;&lt;a href=&quot;#编译安装redis&quot; class=&quot;headerlink&quot; title=&quot;编译安装redis&quot;&gt;&lt;/a&gt;编译安装redis&lt;/h3&gt;&lt;p&gt;下载好redis的tar.gz包后，在指定的位置进行解压缩：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -xzvf redis-3.0.5.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进入解压缩后的程序目录，使用make对redis进行编译：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd redis-3.0.5
make
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行完make后，会在src目录中发现生成了几个可执行文件，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis-server：redis服务器启动程序&lt;/li&gt;
&lt;li&gt;redis-cli：Redis客户端操作工具。也可以用telnet根据其纯文本协议来操作&lt;/li&gt;
&lt;li&gt;redis-benchmark：Redis性能测试工具&lt;/li&gt;
&lt;li&gt;redis-check-aof：数据修复工具&lt;/li&gt;
&lt;li&gt;redis-check-dump：检查导出工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;手动将上述的执行文件复制到/usr/local/bin下，即可在任意位置执行这些redis命令了，不需要每次执行都要带上执行文件的路径位置了。&lt;/p&gt;
&lt;p&gt;或者你还可以执行make install命令，默认会自动将生成的可执行文件复制到/usr/local/bin下，你也可以通过命令参数来指定安装的目录位置，具体查看redis程序目录下的ReadMe文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可能你会问，linux下安装程序，一般都是需要./configure,make和make install三个步骤，为何这里没有configure？那是因为configure是程序安装目录下的一个可执行脚本，一般用来生成 Makefile，为下一步的编译做准备。而redis的安装包中已经存在一个Makefile，所以自然省去了configure这步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在make命令执行后，你可以选择不执行make install命令，自己手动的将程序目录下src目录中的对应可执行文件copy到/usr/bin下，这招是从oschina的红薯&lt;a href=&quot;http://www.oschina.net/question/12_18065?fromerr=uNX17fsi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;那里&lt;/a&gt;学来的。&lt;/p&gt;
&lt;p&gt;当然你可能会有疑惑，make install是安装到了/usr/local/bin下，而自己copy为何在/usr/bin下。其实这两个不同的位置都可以起到同一个作用，在任何位置执行redis相关命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/usr/bin下面的通常都是系统预装的可执行程序，会随着系统升级而改变&lt;/li&gt;
&lt;li&gt;/usr/local/bin目录是给用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件&lt;/li&gt;
&lt;li&gt;如果两个目录下有相同的可执行程序，谁优先执行受到PATH环境变量的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;配置redis&quot;&gt;&lt;a href=&quot;#配置redis&quot; class=&quot;headerlink&quot; title=&quot;配置redis&quot;&gt;&lt;/a&gt;配置redis&lt;/h3&gt;&lt;p&gt;将redis的配置文件复制到/etc/目录下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp redis.conf /etc/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了让redis后台运行，修改redis.conf文件，修改daemonize配置项为yes：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vi /etc/redis.conf
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;运行redis&quot;&gt;&lt;a href=&quot;#运行redis&quot; class=&quot;headerlink&quot; title=&quot;运行redis&quot;&gt;&lt;/a&gt;运行redis&lt;/h3&gt;&lt;p&gt;完成上述步骤后，启动redis：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-server /etc/redis.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;检查redis是否启动成功：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ps -ef | grep redis
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看到类似下面的一行，表示启动成功：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root     18443     1  0 13:05 ?        00:00:00 ./redis-server *:6379
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此redis已经安装运行完毕，下载的redis安装包和解压缩出来的目录可以删除了。&lt;/p&gt;
&lt;p&gt;如果需要设置redis开机启动项，点击&lt;a href=&quot;http://itbilu.com/linux/management/4kB2ninp.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;redis重点配置项说明&quot;&gt;&lt;a href=&quot;#redis重点配置项说明&quot; class=&quot;headerlink&quot; title=&quot;redis重点配置项说明&quot;&gt;&lt;/a&gt;redis重点配置项说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;daemonize：是否以后台daemon方式运行&lt;/li&gt;
&lt;li&gt;pidfile：pid文件位置&lt;/li&gt;
&lt;li&gt;port：监听的端口号&lt;/li&gt;
&lt;li&gt;timeout：请求超时时间&lt;/li&gt;
&lt;li&gt;loglevel：log信息级别&lt;/li&gt;
&lt;li&gt;logfile：log文件位置&lt;/li&gt;
&lt;li&gt;databases：开启数据库的数量&lt;/li&gt;
&lt;li&gt;save * *：保存快照的频率，第一个&lt;em&gt;表示多长时间，第三个&lt;/em&gt;表示执行多少次写操作。在一定时间内执行一定数量的写操作时，自动保存快照。可设置多个条件&lt;/li&gt;
&lt;li&gt;rdbcompression：是否使用压缩&lt;/li&gt;
&lt;li&gt;dbfilename：数据快照文件名（只是文件名）&lt;/li&gt;
&lt;li&gt;dir：数据快照的保存目录（仅目录）&lt;/li&gt;
&lt;li&gt;appendonly：是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率&lt;/li&gt;
&lt;li&gt;appendfsync：appendonlylog如何同步到磁盘。三个选项，分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;最佳配置实践&quot;&gt;&lt;a href=&quot;#最佳配置实践&quot; class=&quot;headerlink&quot; title=&quot;最佳配置实践&quot;&gt;&lt;/a&gt;最佳配置实践&lt;/h3&gt;&lt;p&gt;进入到redis的解压目录下，开始进行如下的配置操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建配置文件和数据文件的存储位置&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mkdir /etc/redis&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo mkdir /var/redis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;复制redis解压包中的启动脚本到操作系统的自启动目录下，建议重命名文件时加上端口号&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo cp ./utils/redis_init_script /etc/init.d/redis_6379&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;编辑自启动的redis脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vi /etc/init.d/redis_6379&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将其中&lt;strong&gt;REDISPORT&lt;/strong&gt;改为实际使用的端口号。仔细查看脚本中的代码，会发现其中pid文件路径和配置文件名称都依赖于端口号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复制配置文件到etc下&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo cp ./redis.conf /etc/redis/6379.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，实际使用的配置文件以端口号来命名，这样自启动脚本执行时就会使用这个配置文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建redis的工作数据目录，建议以端口进行区分&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mkdir /var/redis/6379&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在linux操作系统下安装redis的教程，网上已经烂大街了，笔者觉着自己在配置过程中有些操作不太理解，所以在此重新梳理一下安装过程，并对一
    
    </summary>
    
      <category term="开发笔记" scheme="http://chace0120.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="redis" scheme="http://chace0120.github.io/tags/redis/"/>
    
      <category term="centos" scheme="http://chace0120.github.io/tags/centos/"/>
    
      <category term="linux" scheme="http://chace0120.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Maven项目多模块的打包</title>
    <link href="http://chace0120.github.io/2016/05/13/Maven%E9%A1%B9%E7%9B%AE%E5%A4%9A%E6%A8%A1%E5%9D%97%E7%9A%84%E6%89%93%E5%8C%85/"/>
    <id>http://chace0120.github.io/2016/05/13/Maven项目多模块的打包/</id>
    <published>2016-05-13T15:08:49.000Z</published>
    <updated>2016-05-15T15:41:41.313Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近使用SpringBoot开发项目，同时使用的构建工具是Maven。首次应用Maven的多模块(Modules)方式进行的项目构建，原因在于项目分为多个子模块进行阶段性开发，而其中多个子模块中存在重复的代码段，为了避免重复性地copy代码，决定将重复的代码进行抽离，放在一个公共的module里，其他module对这个公共module进行依赖。&lt;/p&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;项目：P&lt;/li&gt;
&lt;li&gt;Module A：后面简称A&lt;/li&gt;
&lt;li&gt;Module B：后面简称B&lt;/li&gt;
&lt;li&gt;Module Common：后面简称C&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A依赖C，B也依赖C，A和B可以分别打包成可执行的jar文件。&lt;/p&gt;
&lt;h3 id=&quot;Modules的打包&quot;&gt;&lt;a href=&quot;#Modules的打包&quot; class=&quot;headerlink&quot; title=&quot;Modules的打包&quot;&gt;&lt;/a&gt;Modules的打包&lt;/h3&gt;&lt;p&gt;目前已开发完毕A的功能，需要将A打包并进行部署。当使用Maven对A直接进行package时，提示依赖于C的jar包找不到。因为直接对A打包，C并没有被打包，依赖关系无法保持。&lt;/p&gt;
&lt;p&gt;但是如果直接对P进行package，P的pom中定义了所有的modules,会对执行所有的modules执行打包，在加上A的pom中声明对C的依赖，可以成功生成可执行的A的jar包。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P的pom.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;modules&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;A&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;B&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;modules&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;A的pom.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;xxxxx&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;PS：&lt;/strong&gt;这里注意C打包出来的应该是不可执行的jar包，所以不要在C的pom中定义spring-boot-maven-plugin插件，因为这个SpringBoot插件会在Maven的package后进行二次打包，目的为了生成可执行jar包，如果C中定义了这个插件，会报错提示没有找到main函数。&lt;/p&gt;
&lt;h3 id=&quot;按需打包&quot;&gt;&lt;a href=&quot;#按需打包&quot; class=&quot;headerlink&quot; title=&quot;按需打包&quot;&gt;&lt;/a&gt;按需打包&lt;/h3&gt;&lt;p&gt;上述的打包方式，不太优雅。笔者只需要对A进行打包，因为A依赖C，进而需要对C进行打包。但是如果对P进行打包的话，B会“无辜”地被牵连到，B也会被打包。而且如果一个项目中的modules很多的话，每个module打包前还需要执行编译、测试等生命周期，未必高效。&lt;/p&gt;
&lt;p&gt;那么笔者现在需要的是只对A和C进行打包，如何做到呢？执行如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mvn -pl A -am install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述命令的意思是指定构建Module A，同时依据依赖树的路径，构建A的依赖（无论是直接的还是间接的）。注意这里的命令是install，而不是package。&lt;/p&gt;
&lt;p&gt;具体命令选项的含义可查看&lt;a href=&quot;http://blog.sonatype.com/2009/10/maven-tips-and-tricks-advanced-reactor-options/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近使用SpringBoot开发项目，同时使用的构建工具是Maven。首次应用Maven的多模块(Modules)方式进行的项目构建，原因在
    
    </summary>
    
      <category term="开发笔记" scheme="http://chace0120.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="springboot" scheme="http://chace0120.github.io/tags/springboot/"/>
    
      <category term="maven" scheme="http://chace0120.github.io/tags/maven/"/>
    
      <category term="module" scheme="http://chace0120.github.io/tags/module/"/>
    
  </entry>
  
  <entry>
    <title>Spring拦截器中@Value无效的解决办法</title>
    <link href="http://chace0120.github.io/2016/05/11/Spring%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%AD@Value%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://chace0120.github.io/2016/05/11/Spring拦截器中@Value无效的解决办法/</id>
    <published>2016-05-11T15:08:49.000Z</published>
    <updated>2016-05-13T14:36:33.034Z</updated>
    
    <content type="html">&lt;p&gt;最近在使用SpringBoot开发项目时，用到了SpringMVC拦截器的功能。鉴于SpringBoot指南中建议使用Java Config的配置方式，拦截器的配置也不例外，从原先的xml配置方式转为了Java Config。&lt;/p&gt;
&lt;p&gt;首先贴出拦截器的一种配置方式：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebMvcConfig&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addInterceptors&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(InterceptorRegistry registry)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.addInterceptors(registry);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        registry.addInterceptor(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LogInterceptor()).addPathPatterns(&lt;span class=&quot;string&quot;&gt;&quot;/**&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的拦截器配置在网上搜索一下，也是随处可见的。拦截器可以正常运作，但是拦截器中@Value注解的属性值为null，没有读取到期望的properties文件中的值。&lt;/p&gt;
&lt;p&gt;再看拦截器的另一种配置方式：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebMvcConfig&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; LogInterceptor &lt;span class=&quot;title&quot;&gt;logInterceptor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LogInterceptor();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addInterceptors&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(InterceptorRegistry registry)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.addInterceptors(registry);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        registry.addInterceptor(logInterceptor()).addPathPatterns(&lt;span class=&quot;string&quot;&gt;&quot;/**&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果按照上面的配置方式，@Value注解可以成功注入properties文件中的属性值。&lt;/p&gt;
&lt;p&gt;思考：第一种方式中，拦截器是手动new出来的，拦截器中的依赖注入并未得到处理；第二种方式，同样是new出来的拦截器，但通过@Bean的声明，表明拦截器是Spring管理的bean，依赖注入工作自然Spring会做处理。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用SpringBoot开发项目时，用到了SpringMVC拦截器的功能。鉴于SpringBoot指南中建议使用Java Config的配置方式，拦截器的配置也不例外，从原先的xml配置方式转为了Java Config。&lt;/p&gt;
&lt;p&gt;首先贴出拦截器的一种配置方式：&lt;
    
    </summary>
    
      <category term="开发笔记" scheme="http://chace0120.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring" scheme="http://chace0120.github.io/tags/spring/"/>
    
      <category term="springboot" scheme="http://chace0120.github.io/tags/springboot/"/>
    
      <category term="interceptor" scheme="http://chace0120.github.io/tags/interceptor/"/>
    
  </entry>
  
  <entry>
    <title>Java中文乱码的一种解决方案</title>
    <link href="http://chace0120.github.io/2016/03/28/Java%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://chace0120.github.io/2016/03/28/Java中文乱码的一种解决方案/</id>
    <published>2016-03-28T12:21:18.000Z</published>
    <updated>2016-03-29T13:49:02.074Z</updated>
    
    <content type="html">&lt;p&gt;在jsp中常见的乱码解决办法无外乎是关于get和post两种方式的，但只有切实地在实践中使用时才会注意或者说注重到其他方式。例如，在http请求头中传送中文参数，出现乱码，如何解决？&lt;/p&gt;
&lt;p&gt;实际场景：使用Spring提供的RestTemplate向WebService发送put请求，使用HttpHeader类装载需要传递的参数（包括中文）。请求端系统使用的是utf-8编码，而服务端使用的是gbk编码，使用http监听工具查看所发出的http请求信息，发现header中的中文参数乱码。&lt;/p&gt;
&lt;p&gt;尝试的方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在服务端接收到参数时，utf-8转gbk，无效。&lt;/li&gt;
&lt;li&gt;在服务端接收到参数时，iso-8859-1转gbk，无效。&lt;/li&gt;
&lt;li&gt;在发送请求前将中文参数转码，utf-8转iso-8859-1，无效。&lt;/li&gt;
&lt;li&gt;在请求端，HttpHeader设定ContentType为“application/json;UTF-8”，无效。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(remark.getBytes(&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;ISO-8859-1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;headers.setContentType(Media.valueOf(&lt;span class=&quot;string&quot;&gt;&quot;application/json;UTF-8&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写到这里，有人应该感觉到这有点“病急乱投医”的感觉了，没有头绪地在试着各种方式。是的，起初我觉得是请求header中采用了ISO-8859-1的编码，但尝试后很显然不是；后来我觉着是否是RestTemplate中采用的HttpMessageConverter方式所决定的，但没能找到很好的证明方式，查资料说的是StringHttpMessageConverter默认采用的是ISO-8859-1编码，可我觉得我指定了ContentType为application/json，RestTemplate不应该去调用StringHttpMessageConverter啊，其中的原理还有待深究。个人感觉这种情况出问题的可能性最大。&lt;/p&gt;
&lt;p&gt;最后，在网上看到一篇文章后，看了一种建议方式，并且是可行的，就是使用URLEncode，将中文参数在传参前进行encode。这里以GBK编码是为了在服务器端接收参数后无需再转码了，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;list.add(URLEncode.encode(name, &lt;span class=&quot;string&quot;&gt;&quot;GBK&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;URLEncode方式可以解决这种特定场景的中文乱码问题，相信理解其原理后还可以运用到更多的场景。目前我在网上看到的，关于用URLEncode处理中文乱码最多的场景就是文件下载时中文文件名乱码。&lt;/p&gt;
&lt;p&gt;关于Java中文乱码的原理及解决办法可以参看一下&lt;a href=&quot;http://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在jsp中常见的乱码解决办法无外乎是关于get和post两种方式的，但只有切实地在实践中使用时才会注意或者说注重到其他方式。例如，在http请求头中传送中文参数，出现乱码，如何解决？&lt;/p&gt;
&lt;p&gt;实际场景：使用Spring提供的RestTemplate向WebServic
    
    </summary>
    
    
      <category term="Java" scheme="http://chace0120.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
