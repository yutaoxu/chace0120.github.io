<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chace&#39;s Blog</title>
  <subtitle>Go AHead!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chace0120.github.io/"/>
  <updated>2016-05-23T13:49:16.885Z</updated>
  <id>http://chace0120.github.io/</id>
  
  <author>
    <name>chace</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS下安装Nginx</title>
    <link href="http://chace0120.github.io/2016/05/23/CentOS%E4%B8%8B%E5%AE%89%E8%A3%85Nginx/"/>
    <id>http://chace0120.github.io/2016/05/23/CentOS下安装Nginx/</id>
    <published>2016-05-23T01:29:40.000Z</published>
    <updated>2016-05-23T13:49:16.885Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;项目需要，自己整个nginx玩玩，部署服务器的操作系统为CentOS 6.5。&lt;/p&gt;
&lt;h3 id=&quot;nginx安装&quot;&gt;&lt;a href=&quot;#nginx安装&quot; class=&quot;headerlink&quot; title=&quot;nginx安装&quot;&gt;&lt;/a&gt;nginx安装&lt;/h3&gt;&lt;p&gt;上网搜了一下关于nginx的安装教程，大致存在两种安装方法，都是通过yum install命令来完成。&lt;/p&gt;
&lt;p&gt;方法一：自己选择下载安装nginx依赖的其他包，然后下载nginx的安装包，编译安装即可。这种方式的好处是扩展性强，往后需要安装其他模块都是可控的。不妥之处是步骤繁琐，依赖包多，需要牢记。&lt;/p&gt;
&lt;p&gt;可参照如下教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://seanlook.com/2015/05/17/nginx-install-and-config/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nginx服务器安装及配置文件详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.runoob.com/linux/nginx-install-setup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nginx 安装配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/d5114a2a2052&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CentOS nginx安装与配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法二：由于CentOS下，yum源不提供nginx的安装，所以可以通过添加yum源进行快速安装。这种方式的好处是快，方便。不妥之处是不可控，都是别人准备好的东西进行的“一键安装”，今后想安装第三方模块也无从下手。而且笔者目前对这种方式也不是特别理解，所以可能出了差错，也爱莫能助。&lt;/p&gt;
&lt;p&gt;可参照如下教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/ifels/c8cfdfe249e27ffa9ba1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CentOS 6.5 nginx安装与配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h4&gt;&lt;p&gt;如果你已经浏览过上述提供的安装方式后，这里可以对nginx的安装过程进行一些总结。&lt;/p&gt;
&lt;p&gt;其实概括地来讲，安装nginx的步骤为两步，先安装nginx依赖的库，然后安装nginx。安装方式无非两种，如果yum源中存在需要的库，可以方便地使用yum来安装；如果yum源中没有需要的库，那么只能自己下载对应的安装包，然后执行编译安装命令。当然你也可以完全不使用yum，自己下载所有需要的源码安装包，然后编译安装。&lt;/p&gt;
&lt;h3 id=&quot;nginx运行&quot;&gt;&lt;a href=&quot;#nginx运行&quot; class=&quot;headerlink&quot; title=&quot;nginx运行&quot;&gt;&lt;/a&gt;nginx运行&lt;/h3&gt;&lt;p&gt;假设nginx安装在/usr/local/nginx/sbin下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/nginx
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;启动nginx&quot;&gt;&lt;a href=&quot;#启动nginx&quot; class=&quot;headerlink&quot; title=&quot;启动nginx&quot;&gt;&lt;/a&gt;启动nginx&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# ./sbin/nginx        # 默认配置文件 conf/nginx.conf，-c 指定
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;停止nginx&quot;&gt;&lt;a href=&quot;#停止nginx&quot; class=&quot;headerlink&quot; title=&quot;停止nginx&quot;&gt;&lt;/a&gt;停止nginx&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# ./sbin/nginx -s stop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pkill nginx
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;重新加载配置文件&quot;&gt;&lt;a href=&quot;#重新加载配置文件&quot; class=&quot;headerlink&quot; title=&quot;重新加载配置文件&quot;&gt;&lt;/a&gt;重新加载配置文件&lt;/h4&gt;&lt;p&gt;reload用于配置文件改变后的nginx刷新应用，没必要一定得停止nginx。reload不会改变启动时指定的配置文件位置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./sbin/nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;系统服务&quot;&gt;&lt;a href=&quot;#系统服务&quot; class=&quot;headerlink&quot; title=&quot;系统服务&quot;&gt;&lt;/a&gt;系统服务&lt;/h4&gt;&lt;p&gt;当然如果将nginx设置为linux系统服务，那么就可以方便使用下面的命令进行上述的操纵：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# service nginx {start|stop|status|restart|reload|configtest}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;笔者使用方法二进行的安装，所以nginx会自动被安装为系统服务了。你也可以搜索如何设置nginx为linux服务。&lt;/p&gt;
&lt;h3 id=&quot;其他相关命令&quot;&gt;&lt;a href=&quot;#其他相关命令&quot; class=&quot;headerlink&quot; title=&quot;其他相关命令&quot;&gt;&lt;/a&gt;其他相关命令&lt;/h3&gt;&lt;h4 id=&quot;查看系统中指定端口号是否被占用&quot;&gt;&lt;a href=&quot;#查看系统中指定端口号是否被占用&quot; class=&quot;headerlink&quot; title=&quot;查看系统中指定端口号是否被占用&quot;&gt;&lt;/a&gt;查看系统中指定端口号是否被占用&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# netstat -apn|grep &amp;lt;端口号&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;项目需要，自己整个nginx玩玩，部署服务器的操作系统为CentOS 6.5。&lt;/p&gt;
&lt;h3 id=&quot;nginx安装&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="开发笔记" scheme="http://chace0120.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="nginx" scheme="http://chace0120.github.io/tags/nginx/"/>
    
      <category term="centos" scheme="http://chace0120.github.io/tags/centos/"/>
    
      <category term="linux" scheme="http://chace0120.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下Redis的安装过程</title>
    <link href="http://chace0120.github.io/2016/05/21/Linux%E4%B8%8BRedis%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/"/>
    <id>http://chace0120.github.io/2016/05/21/Linux下Redis的安装过程/</id>
    <published>2016-05-21T02:50:40.000Z</published>
    <updated>2016-05-23T13:52:32.935Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在linux操作系统下安装redis的教程，网上已经烂大街了，笔者觉着自己在配置过程中有些操作不太理解，所以在此重新梳理一下安装过程，并对一些要点着重进行说明。&lt;/p&gt;
&lt;p&gt;笔者的服务器为CentOS 6.5，redis下载的版本为当前最新的稳定版本。&lt;/p&gt;
&lt;h3 id=&quot;下载redis&quot;&gt;&lt;a href=&quot;#下载redis&quot; class=&quot;headerlink&quot; title=&quot;下载redis&quot;&gt;&lt;/a&gt;下载redis&lt;/h3&gt;&lt;p&gt;下载redis的方式主要有两种，一种是自己下载tar.gz包，然后上传到服务器上进行解压缩。另一种是通过wget命令直接下载redis的压缩包到服务器，然后解压缩。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget http://download.redis.io/releases/redis-3.0.5.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看到此处时，根据自己的需要去选择redis的版本。&lt;/p&gt;
&lt;h3 id=&quot;编译安装redis&quot;&gt;&lt;a href=&quot;#编译安装redis&quot; class=&quot;headerlink&quot; title=&quot;编译安装redis&quot;&gt;&lt;/a&gt;编译安装redis&lt;/h3&gt;&lt;p&gt;下载好redis的tar.gz包后，在指定的位置进行解压缩：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -xzvf redis-3.0.5.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进入解压缩后的程序目录，使用make对redis进行编译：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd redis-3.0.5
make
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行完make后，会在src目录中发现生成了几个可执行文件，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis-server：redis服务器启动程序&lt;/li&gt;
&lt;li&gt;redis-cli：Redis客户端操作工具。也可以用telnet根据其纯文本协议来操作&lt;/li&gt;
&lt;li&gt;redis-benchmark：Redis性能测试工具&lt;/li&gt;
&lt;li&gt;redis-check-aof：数据修复工具&lt;/li&gt;
&lt;li&gt;redis-check-dump：检查导出工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接着执行安装命令，redis默认会将上述的可执行文件生成到/usr/local/bin目录下，你也可以通过命令参数来指定安装的目录位置，具体查看redis程序目录下的ReadMe文件。&lt;/p&gt;
&lt;p&gt;编译安装过后，就可以在任意的位置执行redis服务了，不需要每次执行都要带上执行文件的路径位置了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可能你会问，linux下安装程序，一般都是需要./configure,make和make install三个步骤，为何这里没有configure？那是因为configure是程序安装目录下的一个可执行脚本，一般用来生成 Makefile，为下一步的编译做准备。而redis的安装包中已经存在一个Makefile，所以自然省去了configure这步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在make命令执行后，你可以选择不执行make install命令，自己手动的将程序目录下src目录中的对应可执行文件copy到/usr/bin下，这招是从oschina的红薯&lt;a href=&quot;http://www.oschina.net/question/12_18065?fromerr=uNX17fsi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;那里&lt;/a&gt;学来的。&lt;/p&gt;
&lt;p&gt;当然你可能会有疑惑，make install是安装到了/usr/local/bin下，而自己copy为何在/usr/bin下。其实这两个不同的位置都可以起到同一个作用，在任何位置执行redis相关命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/usr/bin下面的通常都是系统预装的可执行程序，会随着系统升级而改变&lt;/li&gt;
&lt;li&gt;/usr/local/bin目录是给用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件&lt;/li&gt;
&lt;li&gt;如果两个目录下有相同的可执行程序，谁优先执行受到PATH环境变量的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;配置redis&quot;&gt;&lt;a href=&quot;#配置redis&quot; class=&quot;headerlink&quot; title=&quot;配置redis&quot;&gt;&lt;/a&gt;配置redis&lt;/h3&gt;&lt;p&gt;将redis的配置文件复制到/etc/目录下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp redis.conf /etc/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了让redis后台运行，修改redis.conf文件，修改daemonize配置项为yes：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vi /etc/redis.conf
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;运行redis&quot;&gt;&lt;a href=&quot;#运行redis&quot; class=&quot;headerlink&quot; title=&quot;运行redis&quot;&gt;&lt;/a&gt;运行redis&lt;/h3&gt;&lt;p&gt;完成上述步骤后，启动redis：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-server /etc/redis.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;检查redis是否启动成功：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ps -ef | grep redis
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看到类似下面的一行，表示启动成功：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root     18443     1  0 13:05 ?        00:00:00 ./redis-server *:6379
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此redis已经安装运行完毕，下载的redis安装包和解压缩出来的目录可以删除了。&lt;/p&gt;
&lt;p&gt;如果需要设置redis开机启动项，点击&lt;a href=&quot;http://itbilu.com/linux/management/4kB2ninp.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;redis重点配置项说明&quot;&gt;&lt;a href=&quot;#redis重点配置项说明&quot; class=&quot;headerlink&quot; title=&quot;redis重点配置项说明&quot;&gt;&lt;/a&gt;redis重点配置项说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;daemonize：是否以后台daemon方式运行&lt;/li&gt;
&lt;li&gt;pidfile：pid文件位置&lt;/li&gt;
&lt;li&gt;port：监听的端口号&lt;/li&gt;
&lt;li&gt;timeout：请求超时时间&lt;/li&gt;
&lt;li&gt;loglevel：log信息级别&lt;/li&gt;
&lt;li&gt;logfile：log文件位置&lt;/li&gt;
&lt;li&gt;databases：开启数据库的数量&lt;/li&gt;
&lt;li&gt;save * *：保存快照的频率，第一个&lt;em&gt;表示多长时间，第三个&lt;/em&gt;表示执行多少次写操作。在一定时间内执行一定数量的写操作时，自动保存快照。可设置多个条件&lt;/li&gt;
&lt;li&gt;rdbcompression：是否使用压缩&lt;/li&gt;
&lt;li&gt;dbfilename：数据快照文件名（只是文件名）&lt;/li&gt;
&lt;li&gt;dir：数据快照的保存目录（仅目录）&lt;/li&gt;
&lt;li&gt;appendonly：是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率&lt;/li&gt;
&lt;li&gt;appendfsync：appendonlylog如何同步到磁盘。三个选项，分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在linux操作系统下安装redis的教程，网上已经烂大街了，笔者觉着自己在配置过程中有些操作不太理解，所以在此重新梳理一下安装过程，并对一
    
    </summary>
    
      <category term="开发笔记" scheme="http://chace0120.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="centos" scheme="http://chace0120.github.io/tags/centos/"/>
    
      <category term="linux" scheme="http://chace0120.github.io/tags/linux/"/>
    
      <category term="redis" scheme="http://chace0120.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Maven项目多模块的打包</title>
    <link href="http://chace0120.github.io/2016/05/13/Maven%E9%A1%B9%E7%9B%AE%E5%A4%9A%E6%A8%A1%E5%9D%97%E7%9A%84%E6%89%93%E5%8C%85/"/>
    <id>http://chace0120.github.io/2016/05/13/Maven项目多模块的打包/</id>
    <published>2016-05-13T15:08:49.000Z</published>
    <updated>2016-05-15T15:41:41.313Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近使用SpringBoot开发项目，同时使用的构建工具是Maven。首次应用Maven的多模块(Modules)方式进行的项目构建，原因在于项目分为多个子模块进行阶段性开发，而其中多个子模块中存在重复的代码段，为了避免重复性地copy代码，决定将重复的代码进行抽离，放在一个公共的module里，其他module对这个公共module进行依赖。&lt;/p&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;项目：P&lt;/li&gt;
&lt;li&gt;Module A：后面简称A&lt;/li&gt;
&lt;li&gt;Module B：后面简称B&lt;/li&gt;
&lt;li&gt;Module Common：后面简称C&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A依赖C，B也依赖C，A和B可以分别打包成可执行的jar文件。&lt;/p&gt;
&lt;h3 id=&quot;Modules的打包&quot;&gt;&lt;a href=&quot;#Modules的打包&quot; class=&quot;headerlink&quot; title=&quot;Modules的打包&quot;&gt;&lt;/a&gt;Modules的打包&lt;/h3&gt;&lt;p&gt;目前已开发完毕A的功能，需要将A打包并进行部署。当使用Maven对A直接进行package时，提示依赖于C的jar包找不到。因为直接对A打包，C并没有被打包，依赖关系无法保持。&lt;/p&gt;
&lt;p&gt;但是如果直接对P进行package，P的pom中定义了所有的modules,会对执行所有的modules执行打包，在加上A的pom中声明对C的依赖，可以成功生成可执行的A的jar包。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P的pom.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;modules&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;A&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;B&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;modules&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;A的pom.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;xxxxx&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;C&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;PS：&lt;/strong&gt;这里注意C打包出来的应该是不可执行的jar包，所以不要在C的pom中定义spring-boot-maven-plugin插件，因为这个SpringBoot插件会在Maven的package后进行二次打包，目的为了生成可执行jar包，如果C中定义了这个插件，会报错提示没有找到main函数。&lt;/p&gt;
&lt;h3 id=&quot;按需打包&quot;&gt;&lt;a href=&quot;#按需打包&quot; class=&quot;headerlink&quot; title=&quot;按需打包&quot;&gt;&lt;/a&gt;按需打包&lt;/h3&gt;&lt;p&gt;上述的打包方式，不太优雅。笔者只需要对A进行打包，因为A依赖C，进而需要对C进行打包。但是如果对P进行打包的话，B会“无辜”地被牵连到，B也会被打包。而且如果一个项目中的modules很多的话，每个module打包前还需要执行编译、测试等生命周期，未必高效。&lt;/p&gt;
&lt;p&gt;那么笔者现在需要的是只对A和C进行打包，如何做到呢？执行如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mvn -pl A -am install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述命令的意思是指定构建Module A，同时依据依赖树的路径，构建A的依赖（无论是直接的还是间接的）。注意这里的命令是install，而不是package。&lt;/p&gt;
&lt;p&gt;具体命令选项的含义可查看&lt;a href=&quot;http://blog.sonatype.com/2009/10/maven-tips-and-tricks-advanced-reactor-options/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近使用SpringBoot开发项目，同时使用的构建工具是Maven。首次应用Maven的多模块(Modules)方式进行的项目构建，原因在
    
    </summary>
    
      <category term="开发笔记" scheme="http://chace0120.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="maven" scheme="http://chace0120.github.io/tags/maven/"/>
    
      <category term="module" scheme="http://chace0120.github.io/tags/module/"/>
    
      <category term="springboot" scheme="http://chace0120.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Spring拦截器中@Value无效的解决办法</title>
    <link href="http://chace0120.github.io/2016/05/11/Spring%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%AD@Value%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://chace0120.github.io/2016/05/11/Spring拦截器中@Value无效的解决办法/</id>
    <published>2016-05-11T15:08:49.000Z</published>
    <updated>2016-05-13T14:36:33.034Z</updated>
    
    <content type="html">&lt;p&gt;最近在使用SpringBoot开发项目时，用到了SpringMVC拦截器的功能。鉴于SpringBoot指南中建议使用Java Config的配置方式，拦截器的配置也不例外，从原先的xml配置方式转为了Java Config。&lt;/p&gt;
&lt;p&gt;首先贴出拦截器的一种配置方式：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebMvcConfig&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addInterceptors&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(InterceptorRegistry registry)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.addInterceptors(registry);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        registry.addInterceptor(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LogInterceptor()).addPathPatterns(&lt;span class=&quot;string&quot;&gt;&quot;/**&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的拦截器配置在网上搜索一下，也是随处可见的。拦截器可以正常运作，但是拦截器中@Value注解的属性值为null，没有读取到期望的properties文件中的值。&lt;/p&gt;
&lt;p&gt;再看拦截器的另一种配置方式：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebMvcConfig&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; LogInterceptor &lt;span class=&quot;title&quot;&gt;logInterceptor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LogInterceptor();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addInterceptors&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(InterceptorRegistry registry)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.addInterceptors(registry);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        registry.addInterceptor(logInterceptor()).addPathPatterns(&lt;span class=&quot;string&quot;&gt;&quot;/**&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果按照上面的配置方式，@Value注解可以成功注入properties文件中的属性值。&lt;/p&gt;
&lt;p&gt;思考：第一种方式中，拦截器是手动new出来的，拦截器中的依赖注入并未得到处理；第二种方式，同样是new出来的拦截器，但通过@Bean的声明，表明拦截器是Spring管理的bean，依赖注入工作自然Spring会做处理。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用SpringBoot开发项目时，用到了SpringMVC拦截器的功能。鉴于SpringBoot指南中建议使用Java Config的配置方式，拦截器的配置也不例外，从原先的xml配置方式转为了Java Config。&lt;/p&gt;
&lt;p&gt;首先贴出拦截器的一种配置方式：&lt;
    
    </summary>
    
      <category term="开发笔记" scheme="http://chace0120.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="springboot" scheme="http://chace0120.github.io/tags/springboot/"/>
    
      <category term="spring" scheme="http://chace0120.github.io/tags/spring/"/>
    
      <category term="interceptor" scheme="http://chace0120.github.io/tags/interceptor/"/>
    
  </entry>
  
  <entry>
    <title>Java中文乱码的一种解决方案</title>
    <link href="http://chace0120.github.io/2016/03/28/Java%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://chace0120.github.io/2016/03/28/Java中文乱码的一种解决方案/</id>
    <published>2016-03-28T12:21:18.000Z</published>
    <updated>2016-03-29T13:49:02.074Z</updated>
    
    <content type="html">&lt;p&gt;在jsp中常见的乱码解决办法无外乎是关于get和post两种方式的，但只有切实地在实践中使用时才会注意或者说注重到其他方式。例如，在http请求头中传送中文参数，出现乱码，如何解决？&lt;/p&gt;
&lt;p&gt;实际场景：使用Spring提供的RestTemplate向WebService发送put请求，使用HttpHeader类装载需要传递的参数（包括中文）。请求端系统使用的是utf-8编码，而服务端使用的是gbk编码，使用http监听工具查看所发出的http请求信息，发现header中的中文参数乱码。&lt;/p&gt;
&lt;p&gt;尝试的方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在服务端接收到参数时，utf-8转gbk，无效。&lt;/li&gt;
&lt;li&gt;在服务端接收到参数时，iso-8859-1转gbk，无效。&lt;/li&gt;
&lt;li&gt;在发送请求前将中文参数转码，utf-8转iso-8859-1，无效。&lt;/li&gt;
&lt;li&gt;在请求端，HttpHeader设定ContentType为“application/json;UTF-8”，无效。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(remark.getBytes(&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;ISO-8859-1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;headers.setContentType(Media.valueOf(&lt;span class=&quot;string&quot;&gt;&quot;application/json;UTF-8&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写到这里，有人应该感觉到这有点“病急乱投医”的感觉了，没有头绪地在试着各种方式。是的，起初我觉得是请求header中采用了ISO-8859-1的编码，但尝试后很显然不是；后来我觉着是否是RestTemplate中采用的HttpMessageConverter方式所决定的，但没能找到很好的证明方式，查资料说的是StringHttpMessageConverter默认采用的是ISO-8859-1编码，可我觉得我指定了ContentType为application/json，RestTemplate不应该去调用StringHttpMessageConverter啊，其中的原理还有待深究。个人感觉这种情况出问题的可能性最大。&lt;/p&gt;
&lt;p&gt;最后，在网上看到一篇文章后，看了一种建议方式，并且是可行的，就是使用URLEncode，将中文参数在传参前进行encode。这里以GBK编码是为了在服务器端接收参数后无需再转码了，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;list.add(URLEncode.encode(name, &lt;span class=&quot;string&quot;&gt;&quot;GBK&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;URLEncode方式可以解决这种特定场景的中文乱码问题，相信理解其原理后还可以运用到更多的场景。目前我在网上看到的，关于用URLEncode处理中文乱码最多的场景就是文件下载时中文文件名乱码。&lt;/p&gt;
&lt;p&gt;关于Java中文乱码的原理及解决办法可以参看一下&lt;a href=&quot;http://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在jsp中常见的乱码解决办法无外乎是关于get和post两种方式的，但只有切实地在实践中使用时才会注意或者说注重到其他方式。例如，在http请求头中传送中文参数，出现乱码，如何解决？&lt;/p&gt;
&lt;p&gt;实际场景：使用Spring提供的RestTemplate向WebServic
    
    </summary>
    
    
      <category term="Java" scheme="http://chace0120.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
